{"version":3,"sources":["Navbar.js","Card.js","MemoryGame.js","index.js"],"names":["Navbar","_ref","onNewGame","react_default","a","createElement","onClick","Card","props","style","showing","backgroundColor","className","CardState","HIDING","SHOWING","MATCHING","MemoryGame","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cards","id","cardState","shuffle","state","noClick","handleClick","bind","assertThisInitialized","handleNewGame","map","c","objectSpread","setState","_this2","mapCardState","idsToChange","newCardState","includes","foundCard","find","showingCards","filter","ids","length","hidingCards","setTimeout","_this3","card","src_Card_0","key","src_Navbar_0","Component","ReactDOM","render","MemoryGame_MemoryGame","document","getElementById"],"mappings":"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","file":"static/js/main.2b383c0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Navbar.css';\r\n\r\nconst Navbar = ({onNewGame}) => (\r\n  <header>\r\n    <h2><a>Memory Game</a></h2>\r\n    <nav>\r\n      <li><a onClick={onNewGame}>New Game</a></li>\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nNavbar.propTypes = {\r\n  onNewGame: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Card.css'\r\n\r\nconst Card = (props) => {\r\n  let style = {};\r\n  if (props.showing) {\r\n    style.backgroundColor = props.backgroundColor;\r\n  }\r\n  return (\r\n    <div\r\n      onClick={props.onClick}\r\n      className=\"card-container\"\r\n      style={style}\r\n    />\r\n  );\r\n};\r\n\r\nCard.propTypes = {\r\n  showing: PropTypes.bool.isRequired,\r\n  backgroundColor: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Card;\r\n","import React, {Component} from 'react';\r\nimport shuffle from 'shuffle-array';\r\nimport Navbar from './Navbar';\r\nimport Card from './Card';\r\n\r\n\r\n// A card can be in 1 of 3 CardStates\r\n// HIDING - the card is not being shown\r\n// SHOWING - the card is being shown but does not have a match yet\r\n// MATCHING - the card is being shown and has a match.\r\n//            the card should never move from MATCHING to another state during\r\n//            game play.\r\nconst CardState = {\r\n  HIDING: 0,\r\n  SHOWING: 1,\r\n  MATCHING: 2\r\n}\r\n\r\nexport default class MemoryGame extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // The cards that we will use for our state.\r\n    let cards = [\r\n      {id: 0, cardState: CardState.HIDING, backgroundColor: 'red'},\r\n      {id: 1, cardState: CardState.HIDING, backgroundColor: 'red'},\r\n      {id: 2, cardState: CardState.HIDING, backgroundColor: 'navy'},\r\n      {id: 3, cardState: CardState.HIDING, backgroundColor: 'navy'},\r\n      {id: 4, cardState: CardState.HIDING, backgroundColor: 'green'},\r\n      {id: 5, cardState: CardState.HIDING, backgroundColor: 'green'},\r\n      {id: 6, cardState: CardState.HIDING, backgroundColor: 'yellow'},\r\n      {id: 7, cardState: CardState.HIDING, backgroundColor: 'yellow'},\r\n      {id: 8, cardState: CardState.HIDING, backgroundColor: 'black'},\r\n      {id: 9, cardState: CardState.HIDING, backgroundColor: 'black'},\r\n      {id: 10, cardState: CardState.HIDING, backgroundColor: 'purple'},\r\n      {id: 11, cardState: CardState.HIDING, backgroundColor: 'purple'},\r\n      {id: 12, cardState: CardState.HIDING, backgroundColor: 'pink'},\r\n      {id: 13, cardState: CardState.HIDING, backgroundColor: 'pink'},\r\n      {id: 14, cardState: CardState.HIDING, backgroundColor: 'lightskyblue'},\r\n      {id: 15, cardState: CardState.HIDING, backgroundColor: 'lightskyblue'}\r\n    ];\r\n    cards = shuffle(cards);\r\n    this.state = {cards, noClick: false};\r\n    \r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleNewGame = this.handleNewGame.bind(this);\r\n  }\r\n  \r\n  handleNewGame() {\r\n    let cards = this.state.cards.map(c => ({\r\n      ...c,\r\n      cardState: CardState.HIDING\r\n    }));\r\n    cards = shuffle(cards);\r\n    this.setState({cards});\r\n  }\r\n  \r\n  handleClick(id) {\r\n    const mapCardState = (cards, idsToChange, newCardState) => {\r\n      return cards.map(c => {\r\n        if (idsToChange.includes(c.id)) {\r\n          return {\r\n            ...c,\r\n            cardState: newCardState\r\n          };\r\n        }\r\n        return c;\r\n      });\r\n    }\r\n\r\n    const foundCard = this.state.cards.find(c => c.id === id);\r\n    \r\n    if (this.state.noClick || foundCard.cardState !== CardState.HIDING) {\r\n      return;\r\n    }\r\n    \r\n    let noClick = false;\r\n    \r\n    let cards = mapCardState(this.state.cards, [id], CardState.SHOWING);\r\n    \r\n    const showingCards =  cards.filter((c) => c.cardState === CardState.SHOWING);\r\n    \r\n    const ids = showingCards.map(c => c.id);\r\n    \r\n    if (showingCards.length === 2 &&\r\n        showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\r\n      cards = mapCardState(cards, ids, CardState.MATCHING);\r\n    } else if (showingCards.length === 2) {\r\n      let hidingCards = mapCardState(cards, ids, CardState.HIDING);\r\n      \r\n      noClick = true;\r\n      \r\n      this.setState({cards, noClick}, () => {\r\n        setTimeout(() => {\r\n          // set the state of the cards to HIDING after 1.3 seconds\r\n          this.setState({cards: hidingCards, noClick: false});\r\n        }, 1300);\r\n      });\r\n      return;\r\n    }\r\n    \r\n    this.setState({cards, noClick});\r\n  }\r\n\r\n  render() {\r\n    const cards = this.state.cards.map((card) => (\r\n      <Card\r\n        key={card.id}\r\n        showing={card.cardState !== CardState.HIDING}\r\n        backgroundColor={card.backgroundColor}\r\n        onClick={() => this.handleClick(card.id)}\r\n      />\r\n    ));\r\n\r\n    return (\r\n      <div>\r\n        <Navbar onNewGame={this.handleNewGame}/>\r\n        {cards}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport MemoryGame from './MemoryGame';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <MemoryGame />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}